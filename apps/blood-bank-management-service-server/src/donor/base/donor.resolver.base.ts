/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Donor } from "./Donor";
import { DonorCountArgs } from "./DonorCountArgs";
import { DonorFindManyArgs } from "./DonorFindManyArgs";
import { DonorFindUniqueArgs } from "./DonorFindUniqueArgs";
import { CreateDonorArgs } from "./CreateDonorArgs";
import { UpdateDonorArgs } from "./UpdateDonorArgs";
import { DeleteDonorArgs } from "./DeleteDonorArgs";
import { DonationFindManyArgs } from "../../donation/base/DonationFindManyArgs";
import { Donation } from "../../donation/base/Donation";
import { DonorService } from "../donor.service";
@graphql.Resolver(() => Donor)
export class DonorResolverBase {
  constructor(protected readonly service: DonorService) {}

  async _donorsMeta(
    @graphql.Args() args: DonorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Donor])
  async donors(@graphql.Args() args: DonorFindManyArgs): Promise<Donor[]> {
    return this.service.donors(args);
  }

  @graphql.Query(() => Donor, { nullable: true })
  async donor(
    @graphql.Args() args: DonorFindUniqueArgs
  ): Promise<Donor | null> {
    const result = await this.service.donor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Donor)
  async createDonor(@graphql.Args() args: CreateDonorArgs): Promise<Donor> {
    return await this.service.createDonor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Donor)
  async updateDonor(
    @graphql.Args() args: UpdateDonorArgs
  ): Promise<Donor | null> {
    try {
      return await this.service.updateDonor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Donor)
  async deleteDonor(
    @graphql.Args() args: DeleteDonorArgs
  ): Promise<Donor | null> {
    try {
      return await this.service.deleteDonor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Donation], { name: "donations" })
  async findDonations(
    @graphql.Parent() parent: Donor,
    @graphql.Args() args: DonationFindManyArgs
  ): Promise<Donation[]> {
    const results = await this.service.findDonations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
