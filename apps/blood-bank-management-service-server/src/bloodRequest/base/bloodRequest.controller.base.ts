/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BloodRequestService } from "../bloodRequest.service";
import { BloodRequestCreateInput } from "./BloodRequestCreateInput";
import { BloodRequest } from "./BloodRequest";
import { BloodRequestFindManyArgs } from "./BloodRequestFindManyArgs";
import { BloodRequestWhereUniqueInput } from "./BloodRequestWhereUniqueInput";
import { BloodRequestUpdateInput } from "./BloodRequestUpdateInput";
import { DonationFindManyArgs } from "../../donation/base/DonationFindManyArgs";
import { Donation } from "../../donation/base/Donation";
import { DonationWhereUniqueInput } from "../../donation/base/DonationWhereUniqueInput";

export class BloodRequestControllerBase {
  constructor(protected readonly service: BloodRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BloodRequest })
  async createBloodRequest(
    @common.Body() data: BloodRequestCreateInput
  ): Promise<BloodRequest> {
    return await this.service.createBloodRequest({
      data: data,
      select: {
        bloodType: true,
        createdAt: true,
        id: true,
        patientName: true,
        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BloodRequest] })
  @ApiNestedQuery(BloodRequestFindManyArgs)
  async bloodRequests(@common.Req() request: Request): Promise<BloodRequest[]> {
    const args = plainToClass(BloodRequestFindManyArgs, request.query);
    return this.service.bloodRequests({
      ...args,
      select: {
        bloodType: true,
        createdAt: true,
        id: true,
        patientName: true,
        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BloodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bloodRequest(
    @common.Param() params: BloodRequestWhereUniqueInput
  ): Promise<BloodRequest | null> {
    const result = await this.service.bloodRequest({
      where: params,
      select: {
        bloodType: true,
        createdAt: true,
        id: true,
        patientName: true,
        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BloodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBloodRequest(
    @common.Param() params: BloodRequestWhereUniqueInput,
    @common.Body() data: BloodRequestUpdateInput
  ): Promise<BloodRequest | null> {
    try {
      return await this.service.updateBloodRequest({
        where: params,
        data: data,
        select: {
          bloodType: true,
          createdAt: true,
          id: true,
          patientName: true,
          quantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BloodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBloodRequest(
    @common.Param() params: BloodRequestWhereUniqueInput
  ): Promise<BloodRequest | null> {
    try {
      return await this.service.deleteBloodRequest({
        where: params,
        select: {
          bloodType: true,
          createdAt: true,
          id: true,
          patientName: true,
          quantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/donations")
  @ApiNestedQuery(DonationFindManyArgs)
  async findDonations(
    @common.Req() request: Request,
    @common.Param() params: BloodRequestWhereUniqueInput
  ): Promise<Donation[]> {
    const query = plainToClass(DonationFindManyArgs, request.query);
    const results = await this.service.findDonations(params.id, {
      ...query,
      select: {
        bloodRequest: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        donationDate: true,

        donor: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/donations")
  async connectDonations(
    @common.Param() params: BloodRequestWhereUniqueInput,
    @common.Body() body: DonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      donations: {
        connect: body,
      },
    };
    await this.service.updateBloodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/donations")
  async updateDonations(
    @common.Param() params: BloodRequestWhereUniqueInput,
    @common.Body() body: DonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      donations: {
        set: body,
      },
    };
    await this.service.updateBloodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/donations")
  async disconnectDonations(
    @common.Param() params: BloodRequestWhereUniqueInput,
    @common.Body() body: DonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      donations: {
        disconnect: body,
      },
    };
    await this.service.updateBloodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
