/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BloodRequest as PrismaBloodRequest,
  Donation as PrismaDonation,
} from "@prisma/client";

export class BloodRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BloodRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bloodRequest.count(args);
  }

  async bloodRequests<T extends Prisma.BloodRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodRequestFindManyArgs>
  ): Promise<PrismaBloodRequest[]> {
    return this.prisma.bloodRequest.findMany<Prisma.BloodRequestFindManyArgs>(
      args
    );
  }
  async bloodRequest<T extends Prisma.BloodRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodRequestFindUniqueArgs>
  ): Promise<PrismaBloodRequest | null> {
    return this.prisma.bloodRequest.findUnique(args);
  }
  async createBloodRequest<T extends Prisma.BloodRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodRequestCreateArgs>
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.create<T>(args);
  }
  async updateBloodRequest<T extends Prisma.BloodRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodRequestUpdateArgs>
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.update<T>(args);
  }
  async deleteBloodRequest<T extends Prisma.BloodRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodRequestDeleteArgs>
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.delete(args);
  }

  async findDonations(
    parentId: string,
    args: Prisma.DonationFindManyArgs
  ): Promise<PrismaDonation[]> {
    return this.prisma.bloodRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .donations(args);
  }
}
